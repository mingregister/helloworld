// Example
// 这个就是所谓的JenkinsFile，通常是和代码一起放在代码仓库中的?！
pipeline {
  agent {
    kubernetes {
      // 这个是指jenkins里面的标签!!! 就像java,java8这些!!!  怎么又要遵循k8s的label语法???!!!!  
      // 这时，k8s就会创建一个类似: mypodxa-dtt5p-nl0fz 的pod，并将这个pod变成jenkins的node节点(slave执行机), 并且这个执行机会自动带有标签: mypodxa
      label 'mypodxa'
      // 这个名字要与页面上创建kubernetes cloud名称一致
      cloud 'zmhuang_k8s_test'
      // 这个mpod.yaml对应下面的文件, 也是和源码放在一起的.
      yamlFile 'mpod.yaml'
    }
  }

  environment{
    // sh "printenv | sort"   // 这条命令可以打印出内置的环境变量
    // IMAGETAG = 'v0.5'
    // IMAGENAME = 'pythoncicd'
    // REPOSITORYPATH = 'registry.cn-shenzhen.aliyuncs.com/zmhuangpub'
    BRANCHENAME = 'jenkins'
  }

  // triggers {
  //    pollSCM('H/1 * * * *')
  // }

  stages {
    stage('git clone') {
        // 下面${url}就是之前填的url
        // credentialsId在jenkins中的'凭据'中获取
        steps {
                git credentialsId: '${credentialsId}', url: '${url}'
                // git credentialsId: '58bade2d-3165-4613-842f-727fc46ea850', url: '${url}'
                // 虽然我在jenkins里面配置的是*使用jenkins分支*,而实际上，在执行pipeline的过程使用的也是jenkins分支的JenkinsFile，
                // 但这里拉下来的代码是在master分支的，所以要切换成我想要的分支，坑了好久。
                sh 'git checkout ${BRANCHENAME}'
        }
    }

    // github 上面的Dockerfile内容已经更新了，但是jenkins-slave容器里面的Dockerfile总是不更新, 缓存??我用了宿主机的docker???选定了一个node???是因为branch不对，需要先切换到jenkins分支
    stage('docker build') {
        steps {
                container('dockerd') {
                     // withDockerRegistry不能显式指定docker二进制文件的位置，现在通过在镜像里面加上环境变量实现
                     //    可以在系统管理-全局工具配置-docker中配置docker二进制文件的位置.
                     // 这个Credentials用*Username with password"就可以了.
                     withDockerRegistry([credentialsId: "${dockerregistry}", url: 'https://registry.cn-shenzhen.aliyuncs.com']){
                              sh 'cd ${WORKSPACE}'
                              sh '/opt/docker/bin/docker build -t ${REPOSITORYPATH}/${IMAGENAME}:${IMAGETAG} . '
                              sh '/opt/docker/bin/docker push ${REPOSITORYPATH}/${IMAGENAME}:${IMAGETAG} '
                     }
                }
        }
    }
  

    stage('helm deploy') {
        steps {
                // script {
                //     def workspace = manager.build.getEnvVars()["WORKSPACE"]
                //     envFileName = "env"
                //     myFile = new File(workspace + envFileName)
                //     
                //     // lastLine = myFile.readLines().get(myFile.readLines().size().toInteger() - 1)
                //     lastLine = myFile.readLines()
                //     lastLine.each {
                //          // key, value -> println("${key} = ${value}");
                //          key -> println("${key}");
                //          sh 'sed -i "s|((key))|${key}|g" ${WORKSPACE}/deploy/deploy.yaml'
                //      }
                // }

                // 凡是使用这种切换容器的方式的，都必须把jnlp容器的workspace也挂进来，否则会报 [mv: cannot stat ‘/home/jenkins/workspace/k8s-test@tmp/durable-467812dc/jenkins-result.txt.tmp’: No such file or directory] 等错误
                container('helm') {
                      sh 'helm ls'
                      // sh '${WORKSPACE}/replacevar.sh'
                      // sh '#!/usr/bin/env bash;  ENFFILE=env;  ENVLINE=`cat ${ENFFILE}`;   for i in ${ENVLINE}; do  realenv=${i}   sed -i "s/((${realenv}))/${i}/g" ${WORKSPACE}/deploy/deploy.yaml;  done'

                      def lineCount = 0;
                      File file = new File("./test.txt");
                      file.eachLine{
                           line -> println("line ${lineCount++}: ${line}");
                      }

                      sh 'cat ${WORKSPACE}/deploy/deploy.yaml' 
                      // // Todo: 加一个脚本，直接替换所有
                      // sh 'sed -i "s|((REPOSITORYPATH))|${REPOSITORYPATH}|g" ${WORKSPACE}/deploy/deploy.yaml'
                      // sh 'sed -i "s|((IMAGENAME))|${IMAGENAME}|g" ${WORKSPACE}/deploy/deploy.yaml'
                      // sh 'sed -i "s|((IMAGETAG))|${IMAGETAG}|g" ${WORKSPACE}/deploy/deploy.yaml'
                      sh 'kubectl apply -f ${WORKSPACE}/deploy/deploy.yaml'
                 }
        }
    }

  
    // 表示暂停，等确认后再往下继续
    stage('hold') {
        agent none
        steps {
                // sh "printenv | sort"
                input "Does the staging environment look ok?"
         }
    }

    stage('Run containers shell') {
      // /root/bin/git.sh这个脚本是放在mpod.yaml文件的镜像里面的：registry.cn-shanghai.aliyuncs.com/cpaas/build_dockerfile:v5
      steps {
        sh '/root/bin/git.sh ${url}'
      }
    }
  }
}

